<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.varc.brewnetapp.domain.statistics.query.mapper.StatisticsMapper">

  <resultMap id="OrderStatisticsResultMap" type="com.varc.brewnetapp.domain.statistics.query.dto.OrderStatisticsDTO">
    <result property="orderCount" column="order_count" />
    <result property="exchangeCount" column="exchange_count" />
    <result property="returnCount" column="return_count" />
  </resultMap>

  <resultMap id="OrderItemStatisticsResultMap" type="com.varc.brewnetapp.domain.statistics.query.dto.OrderItemStatisticsDTO">
    <result property="itemName" column="item_name" />
    <result property="itemPercent" column="item_percent" />
    <result property="itemCount" column="item_count" />
  </resultMap>

  <resultMap id="OrderCountPriceResultMap" type="com.varc.brewnetapp.domain.statistics.query.dto.OrderCountPriceDTO">
    <result property="date" column="date" />
    <result property="orderCount" column="order_count" />
    <result property="orderPrice" column="order_price" />
  </resultMap>

  <resultMap id="ItemStockResultMap" type="com.varc.brewnetapp.domain.statistics.query.dto.SafeStockStatisticsDTO">
    <result property="itemName" column="item_name"/>
    <result property="itemCode" column="item_code"/>
    <result property="availableStock" column="available_stock"/>
    <result property="safeStock" column="safe_stock"/>
    <result property="availableMinusSafeStock" column="available_minus_safe_stock"/>
    <result property="unApprovedOrderCount" column="unapproved_order_count"/>
    <result property="minPurchaseCount" column="min_purchase_count"/>
  </resultMap>

  <resultMap id="NewOrderResultMap" type="com.varc.brewnetapp.domain.statistics.query.dto.newOrderDTO">
    <id property="orderCode" column="order_code" />
    <result property="franchiseName" column="franchise_name" />
    <result property="franchiseCode" column="franchise_code" />
    <result property="itemName" column="item_name" />
    <result property="totalPrice" column="total_price" />
    <result property="createdAt" column="created_at" />
  </resultMap>

  <resultMap id="approvalResultMap" type="com.varc.brewnetapp.domain.member.query.dto.ApprovalDTO">
    <result property="kind" column="KIND"/>
    <result property="title" column="TITLE"/>
    <result property="drafterName" column="DRAFTER_NAME"/>
    <result property="date" column="DATE"/>
    <result property="status" column="STATUS"/>
    <result property="approverName" column="APPROVER_NAME"/>
    <result property="code" column="CODE"/>
  </resultMap>

  <select id="selectOrderStatistics" resultMap="OrderStatisticsResultMap" parameterType="map">
    SELECT
           (SELECT
                   COUNT(*)
              FROM tbl_order
             WHERE active = true
            <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
               AND created_at BETWEEN #{startDate} AND #{endDate}
            </if>) AS order_count,
          (SELECT
                  COUNT(*)
            FROM tbl_exchange
           WHERE active = true
          <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
             AND created_at BETWEEN #{startDate} AND #{endDate}
          </if>) AS exchange_count,
          (SELECT
                  COUNT(*)
             FROM tbl_return
            WHERE active = true
          <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
             AND created_at BETWEEN #{startDate} AND #{endDate}
          </if>) AS return_count;
  </select>

  <select id="selectOrderItemStatistics" resultMap="OrderItemStatisticsResultMap" parameterType="map">
    SELECT
           OI.item_code
         , I.name as item_name
         , SUM(OI.quantity) as item_count
      FROM tbl_order O
     INNER JOIN tbl_order_item OI ON O.order_code = OI.order_code
     INNER JOIN tbl_item I ON OI.item_code = I.item_code
     WHERE O.active = true
    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
      AND O.created_at BETWEEN #{startDate} AND #{endDate}
    </if>
     GROUP BY OI.item_code, I.name
     ORDER BY SUM(OI.quantity) DESC
     LIMIT 10
  </select>

  <select id="selectOrderItemStatisticsCnt" resultType="int" parameterType="map">
    SELECT
           SUM(OI.quantity) AS item_count
      FROM tbl_order O
     INNER JOIN tbl_order_item OI ON O.order_code = OI.order_code
     WHERE O.active = true
    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
       AND O.created_at BETWEEN #{startDate} AND #{endDate}
    </if>
  </select>

  <select id="selectOrderCountPriceList" resultMap="OrderCountPriceResultMap" parameterType="string">
    SELECT
           DATE(O.created_at) AS date
         , COUNT(O.order_code) AS order_count
         , SUM(OI.part_sum_price) AS order_price
      FROM tbl_order O
      LEFT JOIN tbl_order_item OI ON O.order_code = OI.order_code
     WHERE DATE_FORMAT(O.created_at, '%Y-%m') = #{ yearMonth } AND O.active = true
     GROUP BY DATE(O.created_at)
     ORDER BY date
  </select>

  <select id="selectSafeStock" resultMap="ItemStockResultMap" parameterType="map">
    SELECT
           I.name AS item_name
         , I.item_code
         , S.available_stock
         , I.safety_stock AS safe_stock
         , (S.available_stock - I.safety_stock) AS available_minus_safe_stock
      FROM tbl_stock S
     INNER JOIN tbl_item I ON (I.item_code = S.item_code)
     WHERE I.active = true AND S.active = true AND (S.available_stock - I.safety_stock) &lt; 0
     ORDER BY available_minus_safe_stock
     LIMIT #{ pageSize }
    OFFSET #{ offset }
  </select>

  <select id="selectSafeStockCnt" resultType="int" parameterType="map">
    SELECT
    COALESCE(COUNT(*), 0) AS count
    FROM tbl_stock S
    INNER JOIN tbl_item I ON (I.item_code = S.item_code)
    WHERE I.active = true AND S.active = true AND (S.available_stock - I.safety_stock) &lt; 0
    ORDER BY available_minus_safe_stock
  </select>


  <select id="selectUnApprovedItemCount" resultType="int" parameterType="int">
    SELECT
    COALESCE(SUM(OI.quantity), 0) AS quantity
    FROM tbl_order_item OI
    INNER JOIN tbl_order O ON O.order_code = OI.order_code
    WHERE O.active = true
    AND (O.approval_status = 'UNCONFIRMED' OR O.approval_status = 'CANCELED')
    AND OI.item_code = #{ itemCode }
    GROUP BY OI.item_code;
  </select>


  <select id="selectNewOrder" resultMap="NewOrderResultMap" parameterType="map">
    SELECT
           O.order_code
         , F.franchise_name
         , F.franchise_code
         , CONCAT(I.name, ' 외 ', COUNT(OI.item_code) - 1, '개') AS item_name
         , O.sum_price AS total_price
         , DATE_FORMAT(O.created_at, '%Y-%m-%d') AS created_at
      FROM tbl_order O
     INNER JOIN tbl_order_item OI ON O.order_code = OI.order_code
     INNER JOIN tbl_item I ON OI.item_code = I.item_code
     INNER JOIN tbl_franchise F ON O.franchise_code = F.franchise_code
     WHERE O.active = TRUE AND O.member_code IS NULL
     GROUP BY O.order_code
     ORDER BY O.created_at DESC
     LIMIT #{ pageSize }
    OFFSET #{ offset }
  </select>

  <select id="selectNewOrderCnt" resultType="int" parameterType="map">
    SELECT
           COUNT(*) AS group_count
      FROM (
            SELECT O.order_code
              FROM tbl_order O
             INNER JOIN tbl_order_item OI ON O.order_code = OI.order_code
             INNER JOIN tbl_item I ON OI.item_code = I.item_code
             INNER JOIN tbl_franchise F ON O.franchise_code = F.franchise_code
             WHERE O.active = TRUE AND O.member_code IS NULL
             GROUP BY O.order_code
      ) grouped_data;
  </select>

  <select id="selectApprovalList" resultMap="approvalResultMap" parameterType="map">
    WITH LatestOrderApprover AS (
    SELECT
    MEMBER_CODE
    , ORDER_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY ORDER_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_order_approver
    WHERE ACTIVE = TRUE
    ),
    LatestExchangeApprover AS (
    SELECT
    MEMBER_CODE
    , EXCHANGE_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY EXCHANGE_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_exchange_approver
    WHERE ACTIVE = TRUE
    ),
    LatestReturnApprover AS (
    SELECT
    MEMBER_CODE
    , RETURN_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY RETURN_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_return_approver
    WHERE ACTIVE = TRUE
    ),
    LatestPurchaseApprover AS (
    SELECT
    MEMBER_CODE
    , LETTER_OF_PURCHASE_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY LETTER_OF_PURCHASE_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_letter_of_purchase_approver
    WHERE ACTIVE = TRUE
    )
    SELECT
    'ORDER' AS KIND
    , CONCAT(O.CREATED_AT, ' ', O.ORDER_CODE, '번 주문 기안자 코드 : ', O.MEMBER_CODE) AS TITLE
    , DM.NAME AS DRAFTER_NAME
    , O.CREATED_AT AS DATE
    , CAST(O.APPROVAL_STATUS AS CHAR) AS STATUS
    , AM.NAME AS APPROVER_NAME
    , O.ORDER_CODE AS CODE
    FROM tbl_order O
    INNER JOIN tbl_member DM ON O.MEMBER_CODE = DM.MEMBER_CODE
    INNER JOIN LatestOrderApprover OA ON O.ORDER_CODE = OA.ORDER_CODE
    INNER JOIN tbl_member AM ON OA.MEMBER_CODE = AM.MEMBER_CODE
    WHERE OA.RN = 1 AND O.ACTIVE = TRUE AND OA.ACTIVE = TRUE AND OA.MEMBER_CODE = #{ memberCode }
      AND OA.APPROVED = 'UNCONFIRMED'
    UNION ALL
    SELECT
    'EXCHANGE' AS KIND
    , CONCAT(E.CREATED_AT, ' ', E.ORDER_CODE, '번 교환 기안자 코드 : ', E.MEMBER_CODE) AS TITLE
    , DM.NAME AS DRAFTER_NAME
    , E.CREATED_AT AS DATE
    , CAST(E.APPROVAL_STATUS AS CHAR) AS STATUS
    , AM.NAME AS APPROVER_NAME
    , E.EXCHANGE_CODE AS CODE
    FROM tbl_exchange E
    INNER JOIN tbl_member DM ON E.MEMBER_CODE = DM.MEMBER_CODE
    INNER JOIN LatestExchangeApprover EA ON E.EXCHANGE_CODE = EA.EXCHANGE_CODE
    INNER JOIN tbl_member AM ON EA.MEMBER_CODE = AM.MEMBER_CODE
    WHERE EA.RN = 1 AND E.ACTIVE = TRUE AND EA.ACTIVE = TRUE AND EA.MEMBER_CODE = #{ memberCode }
      AND EA.APPROVED = 'UNCONFIRMED'
    UNION ALL
    SELECT
    'RETURN' AS KIND
    , CONCAT(R.CREATED_AT, ' ', R.ORDER_CODE, '번 반품 기안자 코드 : ', R.MEMBER_CODE) AS TITLE
    , DM.NAME AS DRAFTER_NAME
    , R.CREATED_AT AS DATE
    , CAST(R.APPROVAL_STATUS AS CHAR) AS STATUS
    , AM.NAME AS APPROVER_NAME
    , R.RETURN_CODE AS CODE
    FROM tbl_return R
    INNER JOIN tbl_member DM ON R.MEMBER_CODE = DM.MEMBER_CODE
    INNER JOIN LatestReturnApprover RA ON R.RETURN_CODE = RA.RETURN_CODE
    INNER JOIN tbl_member AM ON RA.MEMBER_CODE = AM.MEMBER_CODE
    WHERE RA.RN = 1 AND R.ACTIVE = TRUE AND RA.ACTIVE = TRUE AND RA.MEMBER_CODE = #{ memberCode }
      AND RA.APPROVED = 'UNCONFIRMED'
    UNION ALL
    SELECT
    'PURCHASE' AS KIND
    , CONCAT(P.CREATED_AT, ' ', P.LETTER_OF_PURCHASE_CODE, '번 발주 기안자 코드 : ', P.MEMBER_CODE) AS TITLE
    , DM.NAME AS DRAFTER_NAME
    , P.CREATED_AT AS DATE
    , CAST(P.APPROVED AS CHAR) AS STATUS
    , AM.NAME AS APPROVER_NAME
    , P.LETTER_OF_PURCHASE_CODE AS CODE
    FROM tbl_letter_of_purchase P
    INNER JOIN tbl_member DM ON P.MEMBER_CODE = DM.MEMBER_CODE
    INNER JOIN LatestPurchaseApprover PA ON P.LETTER_OF_PURCHASE_CODE = PA.LETTER_OF_PURCHASE_CODE
    INNER JOIN tbl_member AM ON PA.MEMBER_CODE = AM.MEMBER_CODE
    WHERE PA.RN = 1 AND P.ACTIVE = TRUE AND PA.ACTIVE = TRUE AND PA.MEMBER_CODE = #{ memberCode }
      AND PA.APPROVED = 'UNCONFIRMED'
    ORDER BY DATE DESC
    LIMIT #{ pageSize }
    OFFSET #{ offset }
  </select>

  <select id="selectApprovalListCnt" resultType="int" parameterType="int">
    SELECT
    SUM(COUNT)
    FROM (
    WITH LatestOrderApprover AS (
    SELECT
    MEMBER_CODE
    , ORDER_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY ORDER_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_order_approver
    WHERE ACTIVE = TRUE
    ),
    LatestExchangeApprover AS (
    SELECT
    MEMBER_CODE
    , EXCHANGE_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY EXCHANGE_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_exchange_approver
    WHERE ACTIVE = TRUE
    ),
    LatestReturnApprover AS (
    SELECT
    MEMBER_CODE
    , RETURN_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY RETURN_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_return_approver
    WHERE ACTIVE = TRUE
    ),
    LatestPurchaseApprover AS (
    SELECT
    MEMBER_CODE
    , LETTER_OF_PURCHASE_CODE
    , ACTIVE
    , APPROVED
    , ROW_NUMBER() OVER (PARTITION BY LETTER_OF_PURCHASE_CODE ORDER BY APPROVED ASC) AS RN
    FROM tbl_letter_of_purchase_approver
    WHERE ACTIVE = TRUE
    )
    SELECT
    COUNT(*) AS COUNT
    FROM tbl_order O
    INNER JOIN LatestOrderApprover OA ON OA.ORDER_CODE = O.ORDER_CODE
    WHERE O.ACTIVE = TRUE AND OA.MEMBER_CODE = #{ memberCode }
    AND OA.APPROVED = 'UNCONFIRMED'
    UNION ALL
    SELECT
    COUNT(*) AS COUNT
    FROM tbl_exchange E
    INNER JOIN LatestExchangeApprover EA ON EA.EXCHANGE_CODE = E.EXCHANGE_CODE
    WHERE E.ACTIVE = TRUE AND EA.MEMBER_CODE = #{ memberCode }
    AND EA.APPROVED = 'UNCONFIRMED'
    UNION ALL
    SELECT
    COUNT(*) AS COUNT
    FROM tbl_return R
    INNER JOIN LatestReturnApprover RA ON RA.RETURN_CODE = R.RETURN_CODE
    WHERE R.ACTIVE = TRUE AND RA.MEMBER_CODE = #{ memberCode }
    AND RA.APPROVED = 'UNCONFIRMED'
    UNION ALL
    SELECT
    COUNT(*) AS COUNT
    FROM tbl_letter_of_purchase P
    INNER JOIN LatestPurchaseApprover PA ON PA.LETTER_OF_PURCHASE_CODE = P.LETTER_OF_PURCHASE_CODE
    WHERE  P.ACTIVE = TRUE AND PA.MEMBER_CODE = #{ memberCode }
    AND PA.APPROVED = 'UNCONFIRMED'
    ) AS UNION_RESULT_SET
  </select>
</mapper>