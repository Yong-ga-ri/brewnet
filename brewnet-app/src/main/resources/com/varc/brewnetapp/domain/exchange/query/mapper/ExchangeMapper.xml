<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.varc.brewnetapp.domain.exchange.query.mapper.ExchangeMapper">

    <!-- ========== resultMap ========== -->

    <!-- 본사 교환요청 목록조회 ResultMap -->
    <resultMap id="exchangeListResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeListVO">
        <result property="exchangeCode" column="exchange_code"/>
        <result property="franchiseName" column="franchise_name"/>
        <result property="itemName" column="item_name"/>
        <result property="reason" column="reason"/>
        <result property="memberCode" column="member_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="status" column="status"/>
        <result property="approvalStatus" column="approval_status"/>
    </resultMap>

    <resultMap id="exchangeDetailItemResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeItemVO">
        <result property="itemUniqueCode" column="item_unique_code"/>
        <result property="itemName" column="item_name"/>
        <result property="superCategory" column="super_category"/>
        <result property="subCategory" column="sub_category"/>
        <result property="quantity" column="quantity"/>
        <result property="partSumPrice" column="part_sum_price"/>
    </resultMap>

    <resultMap id="exchangeDetailResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeDetailVO">
        <id property="exchangeCode" column="exchange_code" />
        <result property="franchiseCode" column="franchise_code"/>
        <result property="createdAt" column="created_at"/>
        <result property="franchiseName" column="franchise_name"/>
        <result property="reason" column="reason"/>
        <result property="memberName" column="member_name"/>
        <result property="comment" column="comment"/>
        <result property="explanation" column="explanation"/>
        <result property="status" column="status"/>

        <!-- 교환 물품 리스트 매핑 -->
        <collection property="exchangeItemList" ofType="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeItemVO"
                    select="selectExchangeDetailItemBy" column="exchange_code"/>

        <!-- 교환 이미지 리스트 매핑 -->
        <collection property="exchangeImageList" ofType="java.lang.String"
                    select="selectExchangeDetailImageBy" column="exchange_code"/>
    </resultMap>

    <resultMap id="exchangeHistoryListResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeHistoryVO">
        <id property="exchangeStockHistoryCode" column="exchange_stock_history_code"/>
        <result property="status" column="status"/>
        <result property="manager" column="manager"/>
        <result property="createdAt" column="created_at"/>
        <result property="confirmed" column="confirmed"/>
        <result property="exchangeCode" column="exchange_code"/>
        <result property="exchangeManager" column="exchange_manager"/>
        <result property="exchangeCreatedAt" column="exchange_created_at"/>
    </resultMap>

    <!-- 타부서 교환처리완료내역 상세조회 ResultMap -->
    <resultMap id="exchangeHistoryDetailResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeHistoryDetailVO">
        <id property="exchangeStockHistoryCode" column="exchange_stock_history_code"/>
        <result property="exchangeCode" column="exchange_code"/>
        <result property="exchangeCreatedAt" column="exchange_created_at"/>
        <result property="franchiseName" column="franchise_name"/>
        <result property="reason" column="reason"/>
        <result property="exchangeManager" column="exchange_manager"/>
        <result property="comment" column="comment"/>
        <result property="createdAt" column="created_at"/>
        <result property="status" column="status"/>
        <result property="manager" column="manager"/>
        <result property="confirmed" column="confirmed"/>

        <!-- 타부서 교환처리완료내역 물품 리스트 매핑 -->
        <collection property="exchangeHistoryItemList" ofType="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeHistoryItemVO"
                    select="selectExchangeHistoryDetailItemBy" column="exchange_stock_history_code"/>
    </resultMap>

    <!-- 타부서 교환처리완료내역 물품 ResultMap -->
    <resultMap id="exchangeHistoryDetailItemResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeHistoryItemVO">
        <result property="itemUniqueCode" column="item_unique_code"/>
        <result property="itemName" column="item_name"/>
        <result property="superCategory" column="super_category"/>
        <result property="subCategory" column="sub_category"/>
        <result property="quantity" column="quantity"/>
        <result property="restockQuantity" column="restock_quantity"/>
    </resultMap>

    <!-- 가맹점 교환요청 목록조회 ResultMap -->
    <resultMap id="franExchangeListResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.FranExchangeListVO">
        <result property="exchangeCode" column="exchange_code"/>
        <result property="status" column="status"/>
        <result property="orderCode" column="order_code"/>
        <result property="itemName" column="item_name"/>
        <result property="sumPrice" column="sum_price"/>
        <result property="createdAt" column="created_at"/>
        <result property="completedAt" column="completed_at"/>
    </resultMap>

    <!-- 가맹점 교환요청 상세조회 - 물품 리스트 ResultMap -->
    <resultMap id="franExchangeDetailItemResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.FranExchangeItemVO">
        <result property="itemCode" column="item_code"/>
        <result property="itemUniqueCode" column="item_unique_code"/>
        <result property="itemName" column="item_name"/>
        <result property="quantity" column="quantity"/>
        <result property="sellingPrice" column="selling_price"/>
        <result property="partSumPrice" column="part_sum_price"/>
    </resultMap>

    <!-- 가맹점 교환요청 상세조회 ResultMap -->
    <resultMap id="franExchangeDetailResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.FranExchangeDetailVO">
        <id property="exchangeCode" column="exchange_code" />
        <result property="createdAt" column="created_at"/>
        <result property="status" column="status"/>
        <result property="orderCode" column="order_code"/>
        <result property="reason" column="reason"/>
        <result property="explanation" column="explanation"/>

        <!-- 교환 물품 리스트 매핑 -->
        <collection property="exchangeItemList" ofType="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.FranExchangeItemVO"
                    select="selectFranExchangeDetailItemBy" column="exchange_code"/>

        <!-- 교환 이미지 리스트 매핑 -->
        <collection property="exchangeImageList" ofType="java.lang.String"
                    select="selectExchangeDetailImageBy" column="exchange_code"/>
    </resultMap>

    <!-- 가맹점 교환요청 상태조회 ResultMap -->
    <resultMap id="franExchangeStatusResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.FranExchangeStatusVO">
        <result property="status" column="status"/>
        <result property="processedAt" column="processed_at"/>
    </resultMap>

    <!-- 본사 교환 결재진행상황 조회 ResultMap -->
    <resultMap id="exchangeApproverResultMap" type="com.varc.brewnetapp.domain.exchange.query.aggregate.vo.ExchangeApproverVO">
        <result property="approverCode" column="approver_code"/>
        <result property="approverName" column="approver_name"/>
        <result property="position" column="position"/>
        <result property="approval" column="approval"/>
        <result property="createdAt" column="created_at"/>
        <result property="comment" column="comment"/>
    </resultMap>



    <!-- ========== Query ========== -->

    <!-- ===== Query 1. 교환내역 ===== -->

    <!-- 교환내역 목록조회 페이지네이션용 cnt 쿼리 -->
    <select id="selectExchangeListCnt" resultType="int">
        SELECT
              COUNT(*)
          FROM (
                 SELECT
                        A.exchange_code
                      , C.franchise_name
                      , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
                      , A.reason
                      , F.name AS member_name
                      , A.created_at
                      , G.status
                      , A.approval_status
                   FROM tbl_exchange A
                        JOIN tbl_order B ON A.order_code = B.order_code
                        JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
                        JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
                        JOIN tbl_item E ON D.item_code = E.item_code
                        LEFT JOIN tbl_member F ON A.member_code = F.member_code
                        JOIN tbl_exchange_status_history G ON A.exchange_code = G.exchange_code
                        JOIN (
                               SELECT exchange_code, MAX(created_at) AS max_created_at
                               FROM tbl_exchange_status_history
                               GROUP BY exchange_code
                        ) latest_status ON G.exchange_code = latest_status.exchange_code
                          AND G.created_at = latest_status.max_created_at
                    GROUP BY A.exchange_code
                 ) AS grouped_result;
    </select>

    <!-- 교환내역 목록조회 쿼리 -->
    <select id="selectExchangeList" resultMap="exchangeListResultMap">
        SELECT
              A.exchange_code
            , C.franchise_name
            , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
            , A.reason
            , F.name AS member_name
            , A.created_at
            , G.status
            , A.approval_status
         FROM tbl_exchange A
              JOIN tbl_order B ON A.order_code = B.order_code
              JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
              JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
              JOIN tbl_item E ON D.item_code = E.item_code
              LEFT JOIN tbl_member F ON A.member_code = F.member_code
              JOIN tbl_exchange_status_history G ON A.exchange_code = G.exchange_code
              JOIN (
                    SELECT exchange_code, MAX(created_at) AS max_created_at
                    FROM tbl_exchange_status_history
                    GROUP BY exchange_code
                    ) latest_status ON G.exchange_code = latest_status.exchange_code
          AND G.created_at = latest_status.max_created_at
        GROUP BY A.exchange_code, A.created_at
        ORDER BY A.created_at DESC
        LIMIT #{ offset }, #{ pageSize };
    </select>

    <!-- 엑셀출력용 전체 교환내역 목록조회 쿼리 -->
    <select id="selectExcelExchangeList" resultMap="exchangeListResultMap">
        SELECT
        A.exchange_code
        , C.franchise_name
        , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
        , A.reason
        , F.name AS member_name
        , A.created_at
        , G.status
        , A.approval_status
        FROM tbl_exchange A
        JOIN tbl_order B ON A.order_code = B.order_code
        JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
        JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
        JOIN tbl_item E ON D.item_code = E.item_code
        LEFT JOIN tbl_member F ON A.member_code = F.member_code
        JOIN tbl_exchange_status_history G ON A.exchange_code = G.exchange_code
        JOIN (
        SELECT exchange_code, MAX(created_at) AS max_created_at
        FROM tbl_exchange_status_history
        GROUP BY exchange_code
        ) latest_status ON G.exchange_code = latest_status.exchange_code
        AND G.created_at = latest_status.max_created_at
        <where>
            <choose>
                <when test="searchFilter == 'exchangeCode'">
                    AND CAST(A.exchange_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'franchiseName'">
                    AND C.franchise_name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'managerName'">
                    AND F.name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
            </choose>
            <if test="startDate != null and endDate != null">
                AND A.created_at BETWEEN #{ startDate } AND CONCAT(#{ endDate }, ' 23:59:59')
            </if>
            <if test="getConfirmed == true">
                AND G.status = 'REQUESTED'
            </if>
        </where>
        GROUP BY A.exchange_code, C.franchise_name, A.reason, F.name, A.created_at, G.status, A.approval_status
        ORDER BY A.created_at DESC
    </select>

    <!-- 미결재된 교환내역 목록조회용 cnt 쿼리 -->
    <select id="selectRequestedExchangeListCnt" resultType="int">
        SELECT
              COUNT(*)
          FROM (
                 SELECT
                        A.exchange_code
                      , C.franchise_name
                      , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
                      , A.reason
                      , F.name AS member_name
                      , A.created_at
                      , G.status
                      , A.approval_status
                   FROM tbl_exchange A
                        JOIN tbl_order B ON A.order_code = B.order_code
                        JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
                        JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
                        JOIN tbl_item E ON D.item_code = E.item_code
                        LEFT JOIN tbl_member F ON A.member_code = F.member_code
                        JOIN tbl_exchange_status_history G ON A.exchange_code = G.exchange_code
                        JOIN (
                               SELECT exchange_code, MAX(created_at) AS max_created_at
                               FROM tbl_exchange_status_history
                               GROUP BY exchange_code
                               ) latest_status ON G.exchange_code = latest_status.exchange_code
                          AND G.created_at = latest_status.max_created_at
                    WHERE G.status = 'REQUESTED'
                    GROUP BY A.exchange_code
                  ) AS grouped_result
    </select>

    <!-- 미결재된 교환내역 목록조회 쿼리 -->
    <select id="selectRequestedExchangeList" resultMap="exchangeListResultMap">
        SELECT
              A.exchange_code
            , C.franchise_name
            , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
            , A.reason
            , F.name AS member_name
            , A.created_at
            , G.status
            , A.approval_status
         FROM tbl_exchange A
              JOIN tbl_order B ON A.order_code = B.order_code
              JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
              JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
              JOIN tbl_item E ON D.item_code = E.item_code
              LEFT JOIN tbl_member F ON A.member_code = F.member_code
              JOIN tbl_exchange_status_history G ON A.exchange_code = G.exchange_code
              JOIN (
                    SELECT exchange_code, MAX(created_at) AS max_created_at
                    FROM tbl_exchange_status_history
                    GROUP BY exchange_code
                    ) latest_status ON G.exchange_code = latest_status.exchange_code
          AND G.created_at = latest_status.max_created_at
        WHERE G.status = 'REQUESTED'
        GROUP BY A.exchange_code, A.created_at
        ORDER BY A.created_at DESC
        LIMIT #{ offset }, #{ pageSize };
    </select>

    <!-- 교환내역 검색 페이지네이션용 cnt 쿼리 -->
    <select id="selectSearchExchangeListCnt" resultType="int">
        SELECT COUNT(*)
        FROM (
        SELECT
              A.exchange_code
            , C.franchise_name
            , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
            , A.reason
            , F.name AS member_name
            , A.created_at
            , G.status
            , A.approval_status
         FROM tbl_exchange A
              JOIN tbl_order B ON A.order_code = B.order_code
              JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
              JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
              JOIN tbl_item E ON D.item_code = E.item_code
              LEFT JOIN tbl_member F ON A.member_code = F.member_code
              JOIN tbl_exchange_status_history G ON A.exchange_code = G.exchange_code
              JOIN (
                    SELECT exchange_code, MAX(created_at) AS max_created_at
                    FROM tbl_exchange_status_history
                    GROUP BY exchange_code
                    ) latest_status ON G.exchange_code = latest_status.exchange_code
          AND G.created_at = latest_status.max_created_at
        <where>
            <choose>
                <when test="searchFilter == 'exchangeCode'">
                    AND CAST(A.exchange_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'franchiseName'">
                    AND C.franchise_name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'managerName'">
                    AND F.name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
            </choose>
            <if test="startDate != null and endDate != null">
                AND A.created_at BETWEEN #{ startDate } AND CONCAT(#{ endDate }, ' 23:59:59')
            </if>
            <if test="getConfirmed == true">
                AND G.status = 'REQUESTED'
            </if>
        </where>
        GROUP BY A.exchange_code, C.franchise_name, A.reason, F.name, A.created_at, G.status, A.approval_status
        ) AS grouped_result;
    </select>

    <!-- 교환내역 검색 쿼리 -->
    <select id="selectSearchExchangeList" resultMap="exchangeListResultMap">
        SELECT
              A.exchange_code
            , C.franchise_name
            , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
            , A.reason
            , F.name AS member_name
            , A.created_at
            , G.status
            , A.approval_status
         FROM tbl_exchange A
              JOIN tbl_order B ON A.order_code = B.order_code
              JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
              JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
              JOIN tbl_item E ON D.item_code = E.item_code
              LEFT JOIN tbl_member F ON A.member_code = F.member_code
              JOIN tbl_exchange_status_history G ON A.exchange_code = G.exchange_code
              JOIN (
                    SELECT exchange_code, MAX(created_at) AS max_created_at
                    FROM tbl_exchange_status_history
                    GROUP BY exchange_code
                    ) latest_status ON G.exchange_code = latest_status.exchange_code
          AND G.created_at = latest_status.max_created_at
        <where>
            <choose>
                <when test="searchFilter == 'exchangeCode'">
                    AND CAST(A.exchange_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'franchiseName'">
                    AND C.franchise_name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'managerName'">
                    AND F.name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
            </choose>
            <if test="startDate != null and endDate != null">
                AND A.created_at BETWEEN #{ startDate } AND CONCAT(#{ endDate }, ' 23:59:59')
            </if>
            <if test="getConfirmed == true">
                AND G.status = 'REQUESTED'
            </if>
        </where>
        GROUP BY A.exchange_code, C.franchise_name, A.reason, F.name, A.created_at, G.status, A.approval_status
        ORDER BY A.created_at DESC
        LIMIT #{ offset }, #{ pageSize };
    </select>

    <!-- 교환내역 상세조회 쿼리 -->
    <select id="selectExchangeDetailBy" resultMap="exchangeDetailResultMap">
        SELECT
        A.exchange_code
        , C.franchise_code
        , A.created_at
        , C.franchise_name
        , A.reason
        , D.name AS member_name
        , A.comment
        , A.explanation
        , E.status
        FROM tbl_exchange A
        JOIN tbl_order B ON A.order_code = B.order_code
        JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
        LEFT JOIN tbl_member D ON A.member_code = D.member_code
        JOIN tbl_exchange_status_history E ON A.exchange_code = E.exchange_code
        JOIN (
        SELECT exchange_code, MAX(created_at) AS max_created_at
        FROM tbl_exchange_status_history
        GROUP BY exchange_code
        ) latest_status ON A.exchange_code = latest_status.exchange_code AND E.created_at = latest_status.max_created_at
        WHERE A.exchange_code = #{ exchangeCode };
    </select>

    <!-- 교환내역 상세조회 - 이미지 목록 조회 쿼리 -->
    <select id="selectExchangeDetailImageBy" resultType="string">
        SELECT
              A.image_url
         FROM tbl_exchange_img A
        WHERE A.exchange_code = #{ exchangeCode };
    </select>

    <!-- 교환내역 상세조회 - 물품 목록 조회 쿼리 -->
    <select id="selectExchangeDetailItemBy" resultMap="exchangeDetailItemResultMap">
        SELECT
        B.item_unique_code
        , B.name AS item_name
        , C.name AS sub_category
        , D.name AS super_category
        , A.quantity
        , G.part_sum_price
        FROM tbl_exchange_item A
        JOIN tbl_item B ON A.item_code = B.item_code
        JOIN tbl_sub_category C ON B.category_code = C.sub_category_code
        JOIN tbl_super_category D ON C.super_category_code = D.super_category_code
        JOIN tbl_exchange E ON A.exchange_code = E.exchange_code
        JOIN tbl_order F ON E.order_code = F.order_code
        JOIN tbl_order_item G ON F.order_code = G.order_code and A.item_code = G.item_code
        WHERE A.exchange_code = #{ exchangeCode };
    </select>



    <!-- ===== Query 2. 타부서 교환처리완료내역 ===== -->

<!--    &lt;!&ndash;  타부서 교환처리완료내역 목록조회용 cnt 쿼리 &ndash;&gt;-->
<!--    <select id="selectExchangeHistoryListCnt" resultType="int">-->
<!--        SELECT-->
<!--              count(*)-->
<!--         FROM tbl_exchange_stock_history A-->
<!--              JOIN tbl_exchange B ON A.exchange_code = B.exchange_code-->
<!--              JOIN tbl_member C ON B.member_code = C.member_code;-->
<!--    </select>-->

<!--    &lt;!&ndash; 타부서 교환처리완료내역 목록조회 쿼리 &ndash;&gt;-->
<!--    <select id="selectExchangeHistoryList" resultMap="exchangeHistoryListResultMap">-->
<!--        SELECT-->
<!--              A.exchange_stock_history_code-->
<!--            , A.status-->
<!--            , A.manager-->
<!--            , A.created_at-->
<!--            , A.confirmed-->
<!--            , A.exchange_code-->
<!--            , C.name AS exchange_manager-->
<!--         FROM tbl_exchange_stock_history A-->
<!--              JOIN tbl_exchange B ON A.exchange_code = B.exchange_code-->
<!--              JOIN tbl_member C ON B.member_code = C.member_code-->
<!--        ORDER BY A.created_at DESC-->
<!--        LIMIT #{ offset }, #{ pageSize };-->
<!--    </select>-->

    <!-- 타부서 교환처리완료내역 조회/검색 페이지네이션용 cnt 쿼리 -->
    <select id="selectExchangeHistoryListCnt" resultType="int">
        SELECT
          COUNT(*)
        FROM (
        SELECT
              A.exchange_stock_history_code
            , A.status
            , A.manager
            , A.created_at
            , A.confirmed
            , A.exchange_code
            , C.name AS exchange_manager
            , B.created_at AS exchange_created_at
         FROM tbl_exchange_stock_history A
              JOIN tbl_exchange B ON A.exchange_code = B.exchange_code
              JOIN tbl_member C ON B.member_code = C.member_code
        <where>
            <choose>
                <when test="searchFilter == 'code'">
                    AND CAST(A.exchange_stock_history_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'manager'">
                    AND A.manager LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'exchangeCode'">
                    AND CAST(A.exchange_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'exchangeManager'">
                    AND C.name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
            </choose>
            <if test="startDate != null and endDate != null">
                AND A.created_at BETWEEN #{ startDate } AND CONCAT(#{ endDate }, ' 23:59:59')
            </if>
        </where>
       ) AS grouped_result;
    </select>

    <!-- 타부서 교환처리완료내역 조회/검색 쿼리 -->
    <select id="selectExchangeHistoryList" resultMap="exchangeHistoryListResultMap">
        SELECT
              A.exchange_stock_history_code
            , A.status
            , A.manager
            , A.created_at
            , A.confirmed
            , A.exchange_code
            , C.name AS exchange_manager
            , B.created_at AS exchange_created_at
         FROM tbl_exchange_stock_history A
              JOIN tbl_exchange B ON A.exchange_code = B.exchange_code
              JOIN tbl_member C ON B.member_code = C.member_code
        <where>
            <choose>
                <when test="searchFilter == 'code'">
                    AND CAST(A.exchange_stock_history_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'manager'">
                    AND A.manager LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'exchangeCode'">
                    AND CAST(A.exchange_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'exchangeManager'">
                    AND C.name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
            </choose>
            <if test="startDate != null and endDate != null">
                AND A.created_at BETWEEN #{ startDate } AND CONCAT(#{ endDate }, ' 23:59:59')
            </if>
        </where>
        ORDER BY A.created_at DESC
        LIMIT #{ offset }, #{ pageSize };
    </select>

    <!-- 타부서 교환처리완료내역 상세조회 쿼리 -->
    <select id="selectExchangeHistoryDetailBy" resultMap="exchangeHistoryDetailResultMap">
        SELECT
              A.exchange_stock_history_code
            , B.exchange_code
            , B.created_at AS exchange_created_at
            , D.franchise_name
            , B.reason
            , E.name AS exchange_manager
            , A.comment
            , A.created_at
            , A.status
            , A.manager
            , A.confirmed
         FROM tbl_exchange_stock_history A
              JOIN tbl_exchange B ON A.exchange_code = B.exchange_code
              JOIN tbl_order C ON B.order_code = C.order_code
              JOIN tbl_franchise D ON C.franchise_code = D.franchise_code
              JOIN tbl_member E ON B.member_code = E.member_code
        WHERE A.exchange_stock_history_code = #{ exchangeStockHistoryCode };
    </select>

    <!-- 타부서 교환처리완료내역 물품 쿼리 -->
    <select id="selectExchangeHistoryDetailItemBy" resultMap="exchangeHistoryDetailItemResultMap">
        SELECT
              B.item_unique_code
            , B.name AS item_name
            , C.name AS sub_category
            , D.name AS super_category
            , A.quantity
            , A.restock_quantity
        FROM tbl_exchange_item_status A
              JOIN tbl_item B ON A.item_code = B.item_code
              JOIN tbl_sub_category C ON B.category_code = C.sub_category_code
              JOIN tbl_super_category D ON C.super_category_code = D.super_category_code
        WHERE A.exchange_stock_history_code = #{ exchangeStockHistoryCode };
    </select>

    <!-- ===== Query 3. 가맹점 교환내역 ===== -->

    <!--  가맹점 교환내역 조회용 cnt 쿼리 -->
    <select id="selectFranExchangeListCnt" resultType="int">
        SELECT
               count(*)
          FROM (
                 SELECT
                        A.exchange_code
                      , B.status
                      , C.order_code
                      , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
                      , A.sum_price
                      , A.created_at
                      , CASE WHEN B.status = 'COMPLETED' THEN B.created_at ELSE NULL END AS completed_at
                   FROM tbl_exchange A
                        JOIN tbl_exchange_status_history B ON A.exchange_code = B.exchange_code
                        JOIN (
                              SELECT exchange_code, MAX(created_at) AS max_created_at
                              FROM tbl_exchange_status_history
                              GROUP BY exchange_code ) latest_status ON B.exchange_code = latest_status.exchange_code
                              AND B.created_at = latest_status.max_created_at
                        JOIN tbl_order C ON A.order_code = C.order_code
                        JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
                        JOIN tbl_item E ON D.item_code = E.item_code
                        JOIN tbl_franchise F ON C.franchise_code = F.franchise_code
                  WHERE F.franchise_code = ( SELECT B.franchise_code FROM tbl_member A JOIN tbl_franchise_member B ON A.member_code = B.member_code WHERE A.id = #{ loginId } )
                  GROUP BY A.exchange_code) AS grouped_result;
    </select>

    <!--  가맹점 교환내역 조회 쿼리 -->
    <select id="selectFranExchangeList" resultMap="franExchangeListResultMap">
        SELECT
              A.exchange_code
            , B.status
            , C.order_code
            , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
            , A.sum_price
            , A.created_at
            , CASE WHEN B.status = 'COMPLETED' THEN B.created_at ELSE NULL END AS completed_at
        FROM tbl_exchange A
              JOIN tbl_exchange_status_history B ON A.exchange_code = B.exchange_code
              JOIN (
                     SELECT exchange_code, MAX(created_at) AS max_created_at
                     FROM tbl_exchange_status_history
                     GROUP BY exchange_code
                   ) latest_status ON B.exchange_code = latest_status.exchange_code
              AND B.created_at = latest_status.max_created_at
              JOIN tbl_order C ON A.order_code = C.order_code
              JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
              JOIN tbl_item E ON D.item_code = E.item_code
              JOIN tbl_franchise F ON C.franchise_code = F.franchise_code
        WHERE F.franchise_code = ( SELECT B.franchise_code FROM tbl_member A JOIN tbl_franchise_member B ON A.member_code = B.member_code WHERE A.id = #{ loginId } )
        GROUP BY A.exchange_code, A.created_at
        ORDER BY A.created_at DESC
        LIMIT #{ offset }, #{ pageSize };
    </select>

    <!--  가맹점 교환내역 페이지네이션용 cnt 쿼리 -->
    <select id="selectSearchFranExchangeListCnt" resultType="int">
        SELECT
          COUNT(*)
         FROM (
           SELECT
              A.exchange_code
            , B.status
            , C.order_code
            , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
            , A.sum_price
            , A.created_at
            , CASE WHEN B.status = 'COMPLETED' THEN B.created_at ELSE NULL END AS completed_at
        FROM tbl_exchange A
              JOIN tbl_exchange_status_history B ON A.exchange_code = B.exchange_code
              JOIN (
                     SELECT exchange_code, MAX(created_at) AS max_created_at
                     FROM tbl_exchange_status_history
                     GROUP BY exchange_code
                   ) latest_status ON B.exchange_code = latest_status.exchange_code
              AND B.created_at = latest_status.max_created_at
              JOIN tbl_order C ON A.order_code = C.order_code
              JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
              JOIN tbl_item E ON D.item_code = E.item_code
              JOIN tbl_franchise F ON C.franchise_code = F.franchise_code
        <where>
            F.franchise_code = ( SELECT B.franchise_code FROM tbl_member A JOIN tbl_franchise_member B ON A.member_code = B.member_code WHERE A.id = #{ loginId } )
            <choose>
                <when test="searchFilter == 'exchangeCode'">
                    AND CAST(A.exchange_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'itemName'">
                    AND E.name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
            </choose>
            <if test="startDate != null and endDate != null">
                AND A.created_at BETWEEN #{ startDate } AND CONCAT(#{ endDate }, ' 23:59:59')
            </if>
        </where>
        GROUP BY A.exchange_code) AS grouped_list
    </select>

    <!--  가맹점 교환내역 검색 쿼리 -->
    <select id="selectSearchFranExchangeList" resultMap="franExchangeListResultMap">
        SELECT
              A.exchange_code
            , B.status
            , C.order_code
            , GROUP_CONCAT(E.name SEPARATOR ', ') AS item_name
            , A.sum_price
            , A.created_at
            , CASE WHEN B.status = 'COMPLETED' THEN B.created_at ELSE NULL END AS completed_at
        FROM tbl_exchange A
              JOIN tbl_exchange_status_history B ON A.exchange_code = B.exchange_code
              JOIN (
                     SELECT exchange_code, MAX(created_at) AS max_created_at
                     FROM tbl_exchange_status_history
                     GROUP BY exchange_code
                   ) latest_status ON B.exchange_code = latest_status.exchange_code
              AND B.created_at = latest_status.max_created_at
              JOIN tbl_order C ON A.order_code = C.order_code
              JOIN tbl_exchange_item D ON A.exchange_code = D.exchange_code
              JOIN tbl_item E ON D.item_code = E.item_code
              JOIN tbl_franchise F ON C.franchise_code = F.franchise_code
        <where>
            F.franchise_code = ( SELECT B.franchise_code FROM tbl_member A JOIN tbl_franchise_member B ON A.member_code = B.member_code WHERE A.id = #{ loginId } )
            <choose>
                <when test="searchFilter == 'exchangeCode'">
                    AND CAST(A.exchange_code AS CHAR) LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
                <when test="searchFilter == 'itemName'">
                    AND E.name LIKE CONCAT('%', #{ searchWord }, '%')
                </when>
            </choose>
            <if test="startDate != null and endDate != null">
                AND A.created_at BETWEEN #{ startDate } AND CONCAT(#{ endDate }, ' 23:59:59')
            </if>
        </where>
        GROUP BY A.exchange_code
        ORDER BY A.created_at DESC
        LIMIT #{ offset }, #{ pageSize };
    </select>

    <!-- 가맹점 교환내역 상세조회 쿼리 -->
    <select id="selectFranExchangeDetailBy" resultMap="franExchangeDetailResultMap">
        SELECT
              A.exchange_code
            , A.created_at
            , B.status
            , C.order_code
            , A.reason
            , A.explanation
         FROM tbl_exchange A
              JOIN tbl_exchange_status_history B ON A.exchange_code = B.exchange_code
              JOIN (
                       SELECT exchange_code, MAX(created_at) AS max_created_at
                       FROM tbl_exchange_status_history
                       GROUP BY exchange_code
                    ) latest_status ON B.exchange_code = latest_status.exchange_code
                                   AND B.created_at = latest_status.max_created_at
              JOIN tbl_order C ON A.order_code = C.order_code
        WHERE A.exchange_code = #{ exchangeCode }
        GROUP BY A.exchange_code;
    </select>

    <!-- 가맹점 교환내역 상세조회 - 물품 목록 조회 쿼리 -->
    <select id="selectFranExchangeDetailItemBy" resultMap="franExchangeDetailItemResultMap">
        SELECT
              A.item_code
            , E.item_unique_code
            , E.name AS item_name
            , D.quantity
            , (D.part_sum_price / D.quantity) AS selling_price
            , D.part_sum_price
         FROM tbl_exchange_item A
              JOIN tbl_exchange B ON A.exchange_code = B.exchange_code
              JOIN tbl_order C ON B.order_code = C.order_code
              JOIN tbl_order_item D ON C.order_code = D.order_code
              JOIN tbl_item E ON A.item_code = E.item_code
        WHERE A.exchange_code = #{ exchangeCode } AND A.item_code = D.item_code;
    </select>

    <!-- 가맹점 교환내역 상태조회 쿼리 -->
    <select id="selectFranExchangeStatusBy" resultMap="franExchangeStatusResultMap">
        SELECT
              A.status
            , A.created_at AS processed_at
         FROM tbl_exchange_status_history A
        WHERE A.exchange_code = #{ exchangeCode }
    </select>



    <!-- ===== Query 4. 기타 쿼리 ===== -->

    <!-- 교환코드로 가장 최근 교환상태(status) 1개를 조회하는 쿼리 -->
    <!-- 교환취소 시, 해당 교환요청의 상태가 REQUESTED인지 조회하기 위해 사용 -->
    <select id="selectExchangeLatestStatusBy" resultType="com.varc.brewnetapp.common.domain.exchange.ExchangeStatus">
        SELECT
              A.status
         FROM tbl_exchange_status_history A
              JOIN (
                    SELECT exchange_code, MAX(created_at) AS max_created_at
                    FROM tbl_exchange_status_history
                    GROUP BY exchange_code
                    ) latest_status ON A.exchange_code = latest_status.exchange_code
                    AND A.created_at = latest_status.max_created_at
        WHERE A.exchange_code = #{ exchangeCode }
    </select>

    <!-- 교환코드로 결재상황을 조회하기 위해 사용하는 쿼리 -->
    <!-- (본사)교환상세보기 페이지 - '결재진행상황' 버튼 클릭 시 사용 -->
    <select id="selectExchangeApproverBy" resultMap="exchangeApproverResultMap">
        SELECT
              B.member_code AS approver_code
            , B.name AS approver_name
            , C.name AS position
            , A.approved AS approval
            , A.created_at
            , A.comment
          FROM tbl_exchange_approver A
               JOIN tbl_member B ON A.member_code = B.member_code
               JOIN tbl_position C ON B.position_code = C.position_code
         WHERE exchange_code = #{ exchangeCode } AND A.active != false;
    </select>

    <!-- 유저 아이디(loginId)와 교환코드(exchangeCode)로 해당 가맹점의 주문이 맞는지 확인하는 쿼리 -->
    <!-- 가맹점 목록조회/가맹점 상세조회에서 유효한 요청인지 검증하기 위해 사용 -->
    <select id="selectValidExchangeByFranchise" resultType="boolean">
        SELECT
              EXISTS(
                      SELECT
                             *
                        FROM tbl_exchange A
                             JOIN tbl_order B ON A.order_code = B.order_code
                             JOIN tbl_franchise C ON B.franchise_code = C.franchise_code
                             JOIN tbl_franchise_member D ON B.franchise_code= D.franchise_code
                             JOIN tbl_member E ON D.member_code = E.member_code
                       WHERE A.exchange_code = #{ exchangeCode } AND E.id = #{ loginId }
        ) AS result;
    </select>

    <!-- 유저 아이디(loginId)와 주문코드(orderCode)로 해당 가맹점의 주문이 맞는지 확인하는 쿼리 -->
    <!-- 가맹점 교환신청 시 유효한 요청인지 검증하기 위해 사용 -->
    <select id="selectValidOrderByFranchise" resultType="boolean">
        SELECT
              EXISTS(
                      SELECT
                             *
                        FROM tbl_order A
                             JOIN tbl_franchise B ON A.franchise_code = B.franchise_code
                             JOIN tbl_franchise_member C ON A.franchise_code= C.franchise_code
                             JOIN tbl_member D ON C.member_code = D.member_code
                       WHERE A.order_code = #{ orderCode } AND D.id = #{ loginId }
        ) AS result;
    </select>

    <!-- 주문코드(orderCode)로 교환신청 가능한 그 주문의 상품 리스트 찾는 쿼리-->
    <!-- 가맹점 교환신청 시 선택한 주문코드에서 교환신청 가능한 상품목록을 찾기 위해 사용 -->
    <select id="selectAvailableExchangeItemBy" resultMap="franExchangeDetailItemResultMap">
        SELECT
              A.item_code
            , B.item_unique_code
            , B.name AS item_name
            , A.quantity
            , (A.part_sum_price / A.quantity) AS selling_price
            , A.part_sum_price
         FROM tbl_order_item A
              JOIN tbl_item B ON A.item_code = B.item_code
              JOIN tbl_order C ON A.order_code = C.order_code
        WHERE A.available = 'AVAILABLE' AND A.order_code = #{ orderCode };
    </select>

    <!-- 유저 아이디(loginId)로 교환신청 가능한 주문코드 목록을 찾는 쿼리 -->
    <!-- 가맹점 교환신청 시 교환신청 가능한 주문 목록 찾기 위해 사용(주문에 교환신청 가능한 물품이 1건 이상인 경우에 포함됨) -->
    <select id="selectAvailableExchangeBy" resultType="Integer">
        SELECT
              A.order_code
         FROM tbl_order_item A
              JOIN tbl_item B ON A.item_code = B.item_code
              JOIN tbl_order C ON A.order_code = C.order_code
              JOIN tbl_franchise_member D ON C.franchise_code = D.franchise_code
              JOIN tbl_member E ON D.member_code = E.member_code
        WHERE A.available = 'AVAILABLE' AND E.id = #{ loginId }
        GROUP BY C.order_code
        HAVING COUNT(A.item_code) > 0;
    </select>
</mapper>